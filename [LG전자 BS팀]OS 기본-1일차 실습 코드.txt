k8s@master1:~/바탕화면$ cd ~

k8s@master1:~$ ls

csharp-workspaces  snap  공개  다운로드  문서  바탕화면  비디오  사진  음악  템플릿

k8s@master1:~$ mkdir c-workspaces

k8s@master1:~$ ls

c-workspaces  csharp-workspaces  snap  공개  다운로드  문서  바탕화면  비디오  사진  음악  템플릿

k8s@master1:~$ cd c-workspaces/

k8s@master1:~/c-workspaces$ ls



k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ cat > helloworld.c
#include <stdio.h>
int main(int argc, char *argv[]){
        printf("HELLO WORLD !! \n");
        return 0;
}

k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ gcc helloworld.c
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ ./a.out
HELLO WORLD !!

k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ gcc -o hello helloworld.c
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ ./hello
HELLO WORLD !!
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$


Sample.h
#include <stdio.h>
void fun1();
void fun2();

main.c
#include “Sample.h"
int WinMain(){
    fun1();
    fun2();
    return 0;
}

fun1.c
#include <stdio.h>
void fun1(){
    printf("fun1 !! \n");
}

fun2.c
#include <stdio.h>
void fun2(){
    printf("fun2 !! \n");
}

k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ gcc -c fun1.c
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ gcc -c fun2.c 
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ gcc -c main.c
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ ls -al
....
-rw-r--r-- 1 k8s k8s    45 May 14 14:55 Sample.h
-rw-r--r-- 1 k8s k8s    57 May 14 14:58 fun1.c
-rw-r--r-- 1 k8s k8s  1488 May 14 14:58 fun1.o
-rw-r--r-- 1 k8s k8s    58 May 14 14:58 fun2.c
-rw-r--r-- 1 k8s k8s  1488 May 14 14:58 fun2.o
-rw-r--r-- 1 k8s k8s    63 May 14 15:03 main.c
-rw-r--r-- 1 k8s k8s  1416 May 14 15:03 main.o
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ gcc -o main main.o fun1.o fun2.o
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ main
fun1 !! 
fun2 !!
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ 


###Memory Layout of a C Program
##
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ cat > memory_layout.c
#include <stdio.h>
#include <stdlib.h>

int x;
int y = 15;

int main(int argc, char *argv[])
{
        int *values;
        int i;

        values = (int *)malloc(sizeof(int)*5);

        for(i=0; i<5; i++){
                values[i]=i;
        }

        return 0;
}

k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ gcc memory_layout.c
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ ./a.out
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ size ./a.out
   text    data     bss     dec     hex filename
   1418     604      12    2034     7f2 ./a.out

### C Program Forking Separate Process
##
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ cat > fork_ex1.c
#include <stdio.h>
#include <unistd.h>
#include <wait.h>

int main(){
    pid_t pid;

        // fork a child process
        pid = fork();

        if(pid < 0){ // error
                fprintf(stderr, "Fork Failed");
                return 1;
        }
        else if(pid == 0){ // child process
                execlp("/bin/ls", "ls", NULL);
        }
        else{ // parent process
                // parent will wait for the child to complete.
                wait(NULL);
                printf("Child Complete");
        }
    return 0;
}


k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ gcc fork_ex1.c
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ ./a.out
a.out  fork_ex1.c  memory_layout.c  omp_1.c  omp_2.c  process_001.c
Child Complete
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$

###코드 - 주소 공간 복사
##
k8s@master1:~/c-workspaces$ cat process_001.c

cat: process_001.c: 그런 파일이나 디렉터리가 없습니다

k8s@master1:~/c-workspaces$ cat > process_001.c

#include <stdio.h>

#include <unistd.h>



int main()

{

    pid_t pid;

    pid = fork();

    printf("Hello, Process!\n");



    return 0;

}

k8s@master1:~/c-workspaces$ gcc process_001.c 

k8s@master1:~/c-workspaces$ ls

a.out  process_001.c

k8s@master1:~/c-workspaces$ ./a.out

Hello, Process!

Hello, Process!

k8s@8s@master1:~/c-workspaces$ cat > process_002.c

#include <stdio.h>

#include <unistd.h>



int main()

{

    pid_t pid;

    pid = fork();

    printf("Hello, Process! %d\n", pid);



    return 0;

}

k8s@master1:~/c-workspaces$ gcc process_002.c 

k8s@master1:~/c-workspaces$ ./a.out

Hello, Process! 12359

k8s@master1:~/c-workspaces$ Hello, Process! 0

k8s@master1:~/c-workspaces$ cat > process_003.c

#include <stdio.h>

#include <unistd.h>

#include <wait.h>



int main()

{

    pid_t pid;

    pid = fork();

    if (pid > 0){

        wait(NULL);

    }

    printf("Hello, Process! %d\n", pid);



    return 0;

}

k8s@master1:~/c-workspaces$ gcc process_003.c 

k8s@master1:~/c-workspaces$ ./a.out

Hello, Process! 0

Hello, Process! 12967

k8s@master1:~/c-workspaces$ 

k8s@master1:~/c-workspaces$ cat > process_004.c

#include <stdio.h>

#include <unistd.h>

#include <wait.h>



int value = 5;



int main()

{

    pid_t pid;

    pid = fork();



    if (pid == 0) {

        value += 15;

        return 0;

    }

    else if (pid > 0) {

        wait(NULL);

        printf("Parent: value = %d\n", value);

    }

}

k8s@master1:~/c-workspaces$ gcc process_004.c 

k8s@master1:~/c-workspaces$ ./a.out

Parent: value = 5

k8s@master1:~/c-workspaces$ 

k8s@master1:~/c-workspaces$ cat > process_005.c

#include <stdio.h>

#include <unistd.h>

#include <wait.h>



int main()

{

    fork();

    fork();

    fork();

	

	printf("Hello, fork()!\n");



    return 0;

}

k8s@master1:~/c-workspaces$ gcc process_005.c 

k8s@master1:~/c-workspaces$ ./a.out

Hello, fork()!

Hello, fork()!

k8s@master1:~/c-workspaces$ Hello, fork()!

Hello, fork()!

Hello, fork()!

Hello, fork()!

Hello, fork()!

Hello, fork()!



k8s@master1:~/c-workspaces$ 

k8s@master1:~/c-workspaces$ cat > process_006.c

#include <stdio.h>

#include <unistd.h>



int main()

{

    int i;

    pid_t pid;



    for (i = 0; i < 4; i++) {

        pid = fork();

    }

	

	printf("Hello, fork!\n");

    

    return 0;

}

k8s@master1:~/c-workspaces$ gcc process_006.c 

k8s@master1:~/c-workspaces$ ./a.out

Hello, fork!

Hello, fork!

k8s@master1:~/c-workspaces$ Hello, fork!

Hello, fork!

Hello, fork!

Hello, fork!

Hello, fork!

Hello, fork!

Hello, fork!

Hello, fork!

Hello, fork!

Hello, fork!

Hello, fork!

Hello, fork!

Hello, fork!

Hello, fork!

^C

k8s@master1:~/c-workspaces$ 

k8s@master1:~/c-workspaces$ cat > process_007.c

#include <stdio.h>

#include <unistd.h>



int main()

{

    int i;

    pid_t pid;



    for (i = 0; i < 4; i++) {

        pid = fork();

		printf("Hello, fork! %d\n", pid);

    }	

    

    return 0;

}

k8s@master1:~/c-workspaces$ gcc process_007.c 



k8s@master1:~/c-workspaces$ 

k8s@master1:~/c-workspaces$ ./a.out

Hello, fork! 34367

Hello, fork! 34368

Hello, fork! 34369

Hello, fork! 34370

Hello, fork! 0

Hello, fork! 34371

k8s@master1:~/c-workspaces$ Hello, fork! 0

Hello, fork! 0

Hello, fork! 34372

Hello, fork! 34373

Hello, fork! 0

Hello, fork! 34374

Hello, fork! 34375

Hello, fork! 34376

Hello, fork! 0

Hello, fork! 0

Hello, fork! 34377

Hello, fork! 0

Hello, fork! 0

Hello, fork! 34378

Hello, fork! 0

Hello, fork! 34379

Hello, fork! 34380

Hello, fork! 0

Hello, fork! 0

Hello, fork! 0

Hello, fork! 0

Hello, fork! 34381

Hello, fork! 0

Hello, fork! 0

^C

k8s@master1:~/c-workspaces$ 
k8s@master1:~/c-workspaces$ cat > process_008.c

#include <stdio.h>

#include <unistd.h>

#include <wait.h>



int main()

{



	int value = 5;

	

    fork();

	value += 5;

    fork();

	value += 5;

    fork();

	value += 5;

	

	printf("Hello, fork! %d\n",value);



    return 0;

}

k8s@master1:~/c-workspaces$ gcc process_008.c 

k8s@master1:~/c-workspaces$ ./a.out

Hello, fork! 20

Hello, fork! 20

k8s@master1:~/c-workspaces$ Hello, fork! 20

Hello, fork! 20

Hello, fork! 20

Hello, fork! 20

Hello, fork! 20

Hello, fork! 20

^C

k8s@master1:~/c-workspaces$ 

k8s@master1:~/c-workspaces$ cat > process_009.c

#include <stdio.h>

#include <unistd.h>

#include <wait.h>



int main()

{



	int value = 5;

	

    fork();

	value += 5;

	printf("Hello, fork! %d\n",value);

    fork();

	value += 5;

	printf("Hello, fork! %d\n",value);

    fork();

	value += 5;

	

	printf("Hello, fork! %d\n",value);



    return 0;

}

k8s@master1:~/c-workspaces$ gcc process_009.c 

k8s@master1:~/c-workspaces$ ./a.out

Hello, fork! 10

Hello, fork! 15

Hello, fork! 20

Hello, fork! 20

k8s@master1:~/c-workspaces$ Hello, fork! 15

Hello, fork! 20

Hello, fork! 10

Hello, fork! 15

Hello, fork! 20

Hello, fork! 20

Hello, fork! 20

Hello, fork! 15

Hello, fork! 20

Hello, fork! 20

^C

k8s@master1:~/c-workspaces$ 

k8s@master1:~/c-workspaces$ cat > process_010.c

#include <stdio.h>

#include <unistd.h>

#include <wait.h>



int main()

{

    pid_t pid;

    pid = fork();



    if (pid == 0) {

        execlp("/bin/ls", "ls", NULL);

        printf("LINE J\n");

    }



    else if (pid > 0) {

        wait(NULL);

        printf("Child Complete\n");

    }

    

    return 0;

}

k8s@master1:~/c-workspaces$ gcc process_010.c 

k8s@master1:~/c-workspaces$ ./a.out

a.out	       process_002.c  process_004.c  process_006.c  process_008.c  process_010.c

process_001.c  process_003.c  process_005.c  process_007.c  process_009.c

Child Complete

k8s@master1:~/c-workspaces$ 

k8s@master1:~/c-workspaces$ cat > process_011.c

#include <stdio.h>

#include <unistd.h>

#include <wait.h>



int main()

{

    pid_t pid, pid1;

    pid = fork();



    if (pid == 0) { // child process

        pid1 = getpid();

        printf("CHILD: pid = %d\n", pid); //A

        printf("CHILD: pid1 = %d\n", pid1); //B

    }



    else if (pid > 0) { // parent process
	
		wait(NULL);

        pid1 = getpid();

        printf("PARENT: pid = %d\n", pid); //C

        printf("PARENT: pid1 = %d\n", pid1); //D
		
		

    }

    

    return 0;

}

k8s@master1:~/c-workspaces$ gcc process_011.c 

k8s@master1:~/c-workspaces$ ./a.out

child: pid = 49899

child: pid1 = 49898

child: pid = 0

child: pid1 = 49899

k8s@master1:~/c-workspaces$ 

k8s@master1:~/c-workspaces$ cat > process_012.c

#include <wait.h>

#include <stdio.h>

#include <unistd.h>

#define SIZE 5



int nums[SIZE] = {0,1,2,3,4};

int main()

{

    int i;

    pid_t pid;

    pid = fork();

    if (pid == 0) {

        for (i = 0; i < SIZE; i++) {

            nums[i] *= i;

            printf("CHILD: %d \n",nums[i]); /* LINE X */

            }

        }

    else if (pid > 0) {

        wait(NULL);

        for (i = 0; i < SIZE; i++) {

            printf("PARENT: %d \n",nums[i]); /* LINE Y */

            }

    }

    return 0;

}

k8s@master1:~/c-workspaces$ gcc process_012.c 

k8s@master1:~/c-workspaces$ ./a.out

CHILD: 0 

CHILD: 1 

CHILD: 4 

CHILD: 9 

CHILD: 16 

PARENT: 0 

PARENT: 1 

PARENT: 2 

PARENT: 3 

PARENT: 4 

k8s@master1:~/c-workspaces$ 

### POSIX Shared Memory
##
k8s@master1:~/c-workspaces$ cat > shm_producer.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/mman.h>

int main()
{
    const int SIZE = 4096;                      // shared memory의 크기
    const char* name = "OS";                    // shared memory의 이름
    const char* message_0 = "Hello, ";
    const char* message_1 = "Shared Memory!\n";    

    int shm_fd; // shared memory의 file 설명자
    char* ptr;  // shared memory의 pointer

    // shared memory 객체 생성
    shm_fd = shm_open(name, O_CREAT | O_RDWR, 0666);    

    // shared memory의 크기 설정
    ftruncate(shm_fd, SIZE);

    // shared memory 객체에 매핑
    ptr = (char*) mmap(0, SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);

    // shared memory에 메시지 작성
    sprintf(ptr, "%s", message_0);
    ptr += strlen(message_0);
    sprintf(ptr, "%s", message_1);
    ptr += strlen(message_1);

    return 0;
}

k8s@master1:~/c-workspaces$ gcc shm_producer.c -lrt -o shared_producer.out
k8s@master1:~/c-workspaces$ ./shared_producer.out



k8s@master1:~/c-workspaces$ cat > shm_customer.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/mman.h>

int main()
{
    const int SIZE = 4096;                      // shared memory의 크기
    const char* name = "OS";                    // shared memory의 이름    

    int shm_fd; // shared memory의 file 설명자
    char* ptr;  // shared memory의 pointer

    // shared memory 객체 생성
    shm_fd = shm_open(name, O_RDONLY, 0666);    

    // shared memory 객체에 매핑
    ptr = (char*) mmap(0, SIZE, PROT_READ, MAP_SHARED, shm_fd, 0);

    // shared memory 객체 읽기
    printf("%s", (char*)ptr);

    // shared memory 제거
    shm_unlink(name);

    return 0;
}

k8s@master1:~/c-workspaces$ gcc shm_customer.c -lrt -o shared_customer.out

k8s@master1:~/c-workspaces$ ./shared_customer.out

Hello, Shared Memory!

k8s@master1:~/c-workspaces$ 

k8s@master1:~/c-workspaces$ cat > ordinary_pipe.c


#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>

#define BUFFER_SIZE 25
#define READ_END 0
#define WRITE_END 1

int main()
{
    char write_msg[BUFFER_SIZE] = "Greetings";
    char read_msg[BUFFER_SIZE];
    int fd[2];
    pid_t pid;

    // pipe 생성
    pipe(fd);

    pid = fork();   // 새로운 프로세스 생성

    if(pid>0)   // 부모 프로세스(parent process)
    {
        close(fd[READ_END]);    // parent는 read할 필요없기 때문에 해제

        // pipe에 메시지 작성
        write(fd[WRITE_END], write_msg, strlen(write_msg)+1);
        close(fd[WRITE_END]);
    }
    else if(pid==0) // 자식 프로세스(child process)
    {
        close(fd[WRITE_END]);
        
        // pipe 메시지 읽기
        read(fd[READ_END], read_msg, BUFFER_SIZE);
        printf("read %s\n",read_msg);
        close(fd[READ_END]);
    }

    return 0;
}

k8s@master1:~/c-workspaces$ gcc ordinary_pipe.c -lrt -o ordinary_pipe.out

k8s@master1:~/c-workspaces$ ./ordinary_pipe.out

k8s@master1:~/c-workspaces$ read Greetings

^C


k8s@master1:~/c-workspaces$ 



k8s@master1:~/c-workspaces$ cat > DateServer.java



import java.net.*;
import java.io.*;

public class DateServer{
    public static void main(String[] args) throws Exception{
        ServerSocket server = new ServerSocket(6013);

        // now listen for connections
        while(true)
        {
            Socket client = server.accept();
            PrintWriter pout = new PrintWriter(client.getOutputStream(), true);

            // socket에 Date 정보 작성
            pout.println(new java.util.Date().toString());

            // client socket 해제
            client.close();
        }
    }
}

k8s@master1:~/c-workspaces$ cat > DateClient.java



import java.net.*;
import java.io.*;

public class DateClient{
    public static void main(String[] args) throws Exception{
        // make connection to server socket
        Socket socket = new Socket("127.0.0.1", 6013);

        InputStream in = socket.getInputStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(in));

        // read date from the socket
        String line = null;
        while((line=br.readLine())!=null)
        {
            System.out.println(line);
        }

        // close the socket connections
        socket.close();
    }
}

k8s@master1:~/c-workspaces$ javac DateServer.java

k8s@master1:~/c-workspaces$ javac DateClient.java


terminal 1
$ java DateServer

terminal 2
$ java DateClient
output
Tue Dec 28 12:12:26 KST 2021

#### 6. 파일을 이용한 통신 Examples 
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ cat > filetest.c
#include <stdio.h>

int main()
{
    FILE *fp;
    char buf[5];

    fp = fopen("filetest.txt", "w+");  // 파일을 쓰기 및 읽기 모드로 열기
    fwrite("test", sizeof(char), 4, fp);  // 파일에 데이터 쓰기
    fseek(fp, 0, SEEK_SET);  // 파일 포인터를 파일의 처음으로 이동
    fread(buf, sizeof(char), 4, fp);  // 파일에서 데이터 읽기
    buf[4] = '\0';  // 문자열 종료를 위해 널 문자 추가
    printf("%s\n", buf);  // 읽은 데이터 출력
    fclose(fp);  // 파일 닫기

    return 0;
}
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ gcc filetest.c
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ ls
Sample.h    fork_ex1.c  fun2.c    gdb_test.c    helloworld.o  main.o           omp_2.c        process_011.c
a.out       fun1.c      fun2.o    hello         main          memory_layout.c  process_001.c  pthread.c
filetest.c  fun1.o      gdb_test  helloworld.c  main.c        omp_1.c          process_007.c
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ ./a.out
test
k8s@DESKTOP-R0EQ2U6:~/c_workspaces$ cat filetest.txt
testk8s@DESKTOP-R0EQ2U6:~/c_workspaces$
